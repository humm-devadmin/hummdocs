{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How it all breaks down. Little things <$2K Big things <$30k Time to pay 5 x fortnight 10 x fortnight 6 - 60 months Monthly fee - $8 $8 Establishment fee - - $35 - $90 Repeat purchase fee - - $22 Late payment fee $6 $6 $6 Sign up today","title":"Home"},{"location":"best_practice_integration/","text":"Best Practice Integration Convert more browsers into shoppers Showcase humm Our default marketing assets for your website inform customers about humm , convert more browsers into shoppers and increase average basket size. We are always testing to ensure our messages work with customers and improve your results with humm so we may change assets at times. By using assets hosted by us, you can be sure you are always using the most effective humm messaging. The below assets are available via our integration guides. Home page banner and footer Let your customers know you accept humm . Top strip banners are available here . Banners are available here . The humm payment tile is available here . Product page widgets Add humm messaging as close as you can to the price of the item. The humm pricing widget is tailored to the price of the item on your website. Sample product page. Magnified view Items < $1000 Items > $1000 Widgets are available here . More info pop up widget Ensure you enable to fully responsive humm pop-up on the product page call to action. This allows buyers to learn more about humm without interrupting their checkout experience. Triggered from \"More Info\" on: Product page Cart page Checkout page Pop up widget on mobile Pop up widget on desktop - Items < $2,000 Pop up widget on desktop - Items > $2,000 Widgets are available here . Cart widget Remind customers of the benefits of paying with humm at the Cart Page Magnified view Items < $1000 Items > $1000 Widgets are available here . Check out widget This is your last chance to let your customers know they have the option to pay in slices with humm. Magnified view Checkout < $1000 Checkout > $1000 Widgets are available here . IMPORTANT Artwork approval For materials you customise or create, please send a copy to marketing@shophumm.com.au for review and approval before publication. Turnaround time is generally 5 working days for each round of submitted material. >> Get approval < <","title":"Best Practice Integration"},{"location":"best_practice_integration/#best-practice-integration","text":"","title":"Best Practice Integration"},{"location":"best_practice_integration/#showcase-humm","text":"Our default marketing assets for your website inform customers about humm , convert more browsers into shoppers and increase average basket size. We are always testing to ensure our messages work with customers and improve your results with humm so we may change assets at times. By using assets hosted by us, you can be sure you are always using the most effective humm messaging. The below assets are available via our integration guides.","title":"Showcase humm"},{"location":"best_practice_integration/#home-page-banner-and-footer","text":"Let your customers know you accept humm . Top strip banners are available here . Banners are available here . The humm payment tile is available here .","title":"Home page banner and footer"},{"location":"best_practice_integration/#product-page-widgets","text":"Add humm messaging as close as you can to the price of the item. The humm pricing widget is tailored to the price of the item on your website. Sample product page. Magnified view Items < $1000 Items > $1000 Widgets are available here .","title":"Product page widgets"},{"location":"best_practice_integration/#more-info-pop-up-widget","text":"Ensure you enable to fully responsive humm pop-up on the product page call to action. This allows buyers to learn more about humm without interrupting their checkout experience. Triggered from \"More Info\" on: Product page Cart page Checkout page Pop up widget on mobile Pop up widget on desktop - Items < $2,000 Pop up widget on desktop - Items > $2,000 Widgets are available here .","title":"More info pop up widget"},{"location":"best_practice_integration/#cart-widget","text":"Remind customers of the benefits of paying with humm at the Cart Page Magnified view Items < $1000 Items > $1000 Widgets are available here .","title":"Cart widget"},{"location":"best_practice_integration/#check-out-widget","text":"This is your last chance to let your customers know they have the option to pay in slices with humm. Magnified view Checkout < $1000 Checkout > $1000 Widgets are available here .","title":"Check out widget"},{"location":"accreditation/declines_and_approvals/","text":"Accepted Numbers Due to PCI DSS compliance, to perform a test transaction within humm 's sandbox environment, you will need to use one of the following credit card numbers. Type PAN Countries Available AU Result NZ Result VISA 4242 4242 4242 4242 AU, NZ Always approves Always approves VISA 4111 1111 1111 1111 AU Only Always approves N/A VISA 4564 8099 9999 9992 AU, NZ Always approves Dynamic see below VISA 4564 4564 4564 4564 AU, NZ Always approves Dynamic see below MASTERCARD 5506 7500 0000 4364 AU, NZ Always approves Always approves MASTERCARD 5430 4899 9999 9992 AU, NZ Always approves Dynamic see below MASTERCARD 5537 5010 1010 9112 AU, NZ Always approves Dynamic see below CVV Values and Outcomes Humm 's sandbox environment allows Credit Cards to dynamically return different results. This is done using CVV values that are used to force certain test outcomes, particularly declines and approvals. Only a CVV value of 200 will generate a declined; all other values will result in an approval. CVV Code Humm Response Code 200 Declined Other values Approved","title":"Declines and approvals"},{"location":"accreditation/declines_and_approvals/#accepted-numbers","text":"Due to PCI DSS compliance, to perform a test transaction within humm 's sandbox environment, you will need to use one of the following credit card numbers. Type PAN Countries Available AU Result NZ Result VISA 4242 4242 4242 4242 AU, NZ Always approves Always approves VISA 4111 1111 1111 1111 AU Only Always approves N/A VISA 4564 8099 9999 9992 AU, NZ Always approves Dynamic see below VISA 4564 4564 4564 4564 AU, NZ Always approves Dynamic see below MASTERCARD 5506 7500 0000 4364 AU, NZ Always approves Always approves MASTERCARD 5430 4899 9999 9992 AU, NZ Always approves Dynamic see below MASTERCARD 5537 5010 1010 9112 AU, NZ Always approves Dynamic see below","title":"Accepted Numbers"},{"location":"accreditation/declines_and_approvals/#cvv-values-and-outcomes","text":"Humm 's sandbox environment allows Credit Cards to dynamically return different results. This is done using CVV values that are used to force certain test outcomes, particularly declines and approvals. Only a CVV value of 200 will generate a declined; all other values will result in an approval. CVV Code Humm Response Code 200 Declined Other values Approved","title":"CVV Values and Outcomes"},{"location":"accreditation/test/","text":"Test Transactions The following instructions outline how to perform a test transaction with humm. Test mode must be activated in the humm settings before proceeding. Performing a Test Transaction 1 - Add a product to your cart and proceed to check out with humm . The URL you redirect to should be integration- cart.%domain% 2 - Sign up for a test humm account. Only test accounts will be able to sign in. Preexisting live accounts will not work. Please ensure your mobile number is correct as you will need to receive a verification code. All other registration information used during signup may be dummy values. If you can't sign up please contact pit@%domain% 3 - Pay the first installment using a testing credit card Use the credit card number 4111 1111 1111 1111 with any name and valid expiry date. 4 - Your transaction will be approved or declined and you will be redirected back to the web-store. 5 - Confirm that the transaction is showing up correctly in the sales records for your store.","title":"Test Transactions"},{"location":"accreditation/test/#test-transactions","text":"The following instructions outline how to perform a test transaction with humm. Test mode must be activated in the humm settings before proceeding.","title":"Test Transactions"},{"location":"accreditation/test/#performing-a-test-transaction","text":"1 - Add a product to your cart and proceed to check out with humm . The URL you redirect to should be integration- cart.%domain% 2 - Sign up for a test humm account. Only test accounts will be able to sign in. Preexisting live accounts will not work. Please ensure your mobile number is correct as you will need to receive a verification code. All other registration information used during signup may be dummy values. If you can't sign up please contact pit@%domain% 3 - Pay the first installment using a testing credit card Use the credit card number 4111 1111 1111 1111 with any name and valid expiry date. 4 - Your transaction will be approved or declined and you will be redirected back to the web-store. 5 - Confirm that the transaction is showing up correctly in the sales records for your store.","title":"Performing a Test Transaction"},{"location":"developer_resources/checkout_api/","text":"Checkout API Communicating with humm in order to process a transaction via our payment gateway involves the buyers' browser performing an HTTP POST to the humm endpoint. This can be viewed as an authorisation request that is performed by the shopping cart in order to process the payment via humm . Please note, this is not an HTTP API and can not be used for server to server communication. There are two humm gateways that transaction information can be posted to and they represent the live humm payment gateway and the test (sandbox) gateway. Humm Endpoints Humm Environment URL Production Endpoints https://cart.%domain%/Checkout?platform=Default Sandbox Endpoints https://integration-cart.%domain%/Checkout?platform=Default Request POST Posting to the humm endpoint, regardless of whether this is done in the live or test environment, should be done using the format application/x-www-form-urlencoded . Please note that humm adopts the convention of prefixing the various key names with x_ . Below is an overview of the various key-value pairs that can be passed to humm ( Request Values ), a description of what they are as well as an indication of whether they are mandatory or optional. Request values Key Description Type Example Length x_account_id Required This is a unique Merchant ID that is assigned by humm to individual merchants unicode string 123456 10 x_amount Required Represents the transaction's total amount including any taxes and shipping costs decimal 99.90 12 x_currency Required Currency of the transaction ISO-4217 %currency_abbr% 3 x_customer_billing_address1 Billing address line 1 unicode string %address_street_1% 200 x_customer_billing_address2 Billing address line 2 unicode string %address_street_2% 200 x_customer_billing_city Billing city unicode string %address_city% 200 x_customer_billing_country Billing country iso-3166-1 alpha-2 %country_abbr% 3 x_customer_billing_state Billing state unicode string %address_state_abbr% 200 x_customer_billing_postcode Billing postcode unicode string %address_post_code% 200 x_customer_email Billing email address unicode string user@example.com 65 x_customer_first_name Customer's first name unicode string John 50 x_customer_last_name Customer's last name unicode string Appleseed 50 x_customer_phone Customer's phone number unicode string %address_phone_number% 12 x_customer_shipping_address1 Shipping address line 1 unicode string %address_street_1% 200 x_customer_shipping_address2 Shipping address line 2 unicode string %address_street_2% 200 x_customer_shipping_city Shipping city unicode string %address_city% 200 x_customer_shipping_country Shipping country unicode string %country_abbr% 3 x_customer_shipping_first_name Customer's first name (Shipping) unicode string John 50 x_customer_shipping_last_name Customer's last name (Shipping) unicode string Appleseed 50 x_customer_shipping_phone Customer's phone number (Shipping) unicode string %address_phone_number% 12 x_customer_shipping_state Shipping state unicode string %address_state_abbr% 200 x_customer_shipping_postcode Shipping postcode unicode string %address_post_code% 200 x_description Item's description as setup in the shopping cart unicode string Order #767 200 x_reference Required A reference that uniquely references the order and assigned by the merchant. This is unique to the shopping cart. ascii string (max length 250 bytes) 19783 250 x_shop_country Required Country of where the merchant's store is located iso-3166-1alpha-2 %country_abbr% 3 x_shop_name Required Store name as advertised on the internet, TV and other media Shop Inc 200 x_signature Required Request payload that is signed/verified using HMAC-SHA256 hex string, case-insensitive See Signature Generation 64 x_url_callback Required Callback notifications are sent asynchronously to this URL. The protocol must be HTTPS URL https://shop%domain_postfix%/callback 200 x_url_cancel Required Customers are redirected to this URL if they want to quit their humm transaction and return to the shopping cart store instead URL https://shop%domain_postfix%/cancel 200 x_url_complete Required Customers are redirected to this URL if they have successfully processed their transaction using humm URL https://shop%domain_postfix%/compete 200 x_transaction_timeout Transaction timout in minutes. Maximum value is 1440. int 60 Sample POST Below is a sample request that might be posted to an humm gateway that is in the application/x-www-form-urlencoded format. In this example, please ignore values for individual keys - such as the value for x_signature - since this sample POST is for demonstration purposes only and does not demonstrate a real transaction that can be completed by humm . x_reference=123&x_account_id=1&x_amount=100.00&x_currency=%currency_abbr%&x_url_callback=sample_callback_url&x_url_complete=sample_complete_url&x_shop_country=%country_abbr%&x_shop_name=Sample+Shop&x_customer_first_name=first&x_customer_last_name=last&x_customer_email=sample%40email.com&x_customer_billing_country=%country_abbr%&x_customer_billing_city=%address_city%&x_customer_billing_address1=97+Pirie&x_customer_billing_address2=St&x_customer_billing_state=%address_state_abbr%&x_customer_billing_zip=%address_post_code%&x_description=Sample+Store+-+%123&x_url_cancel=sample_cancel_url&x_signature=dummy_signature POST and GET responses There are two responses from humm . The first response that humm always performs is a server-to-server asynchronous POST to the shopping cart on the gateway specified in the x_url_callback and in the format application/x-www-form-urlencoded . Similar to the request POST, the response POST includes key-values pairs that are specific to that transaction and indicate things such as the outcome of that particular transaction if it has failed or is completed successfully for instance. The second response is a HTTP GET to the client on the URLs specified in x_url_complete . The key-value pairs included in this HTTP GET are the same as the POST values as shown below. Please note: The POST response must be sent over HTTPS. Consequently the x_url_callback field should specify the HTTPS has the protocol. Response POST/GET values Below is an overview of the various response key-value pairs that humm returns after it has finished processing a transaction. Note that some of these key-value pairs echo corresponding key-value pairs in the request that humm receives - as is the case with x_currency for instance. Key Description Type Example x_account_id This is the Merchant ID assigned by humm to the merchant Unicode string 123456 x_reference A reference that uniquely references the order and assigned by the merchant ASCII string 19783 x_currency Currency of the transaction ISO-4217 %currency_abbr% x_test Indicates whether the transaction is to be processed as a live or a test transaction True/False False x_amount Represents the transaction's total amount including any taxes and shipping costs decimal 99.90 x_gateway_reference A reference for the authorisation issues by humm that is unique unique string 123 x_purchase_number A reference for the authorisation issues by humm that is unique. Same as x_gateway_reference unique string 123 x_timestamp Time at which the transaction is completed, in UTC format YYYY-MM-DDTHH:MM:SSZ iso-8601 in UTC 2017-06-24T12:11:43Z x_result Values that represent the outcome of a transaction Valid values are completed or failed completed x_signature Response payload that is signed/verified using HMAC-SHA256 hex string, case-insensitive See Signature Generation Response signature validation The x_signature included in both the POST and GET responses must validated by the merchants server. Failure to do so could allow a third-party to tamper with the response. In the event that the provided x_signature does not match the calculated signature, the reponse should be disregarded. All fields recieved starting with x_ should be used to calculate the signature, except for x_signature itself. For further information please see Signature Generation . Response POST reply It is expected that the POST response will be replied to by the merchants server to confirm that the POST response was correctly received. The format of this response must be human-readable and not exceed 1000 characters. The expected key-value pairs of this reply are listed below. Key Description Type Example x_reference A reference that uniquely references the order and assigned by the merchant ASCII string 19783 x_result The status of the order in question according to the merchants server. This should not merely copy the status from the initial response POST ASCII string Approved, Declined, Paid, etc.","title":"Checkout API"},{"location":"developer_resources/checkout_api/#checkout-api","text":"Communicating with humm in order to process a transaction via our payment gateway involves the buyers' browser performing an HTTP POST to the humm endpoint. This can be viewed as an authorisation request that is performed by the shopping cart in order to process the payment via humm . Please note, this is not an HTTP API and can not be used for server to server communication. There are two humm gateways that transaction information can be posted to and they represent the live humm payment gateway and the test (sandbox) gateway.","title":"Checkout API"},{"location":"developer_resources/checkout_api/#humm-endpoints","text":"Humm Environment URL Production Endpoints https://cart.%domain%/Checkout?platform=Default Sandbox Endpoints https://integration-cart.%domain%/Checkout?platform=Default","title":"Humm Endpoints"},{"location":"developer_resources/checkout_api/#request-post","text":"Posting to the humm endpoint, regardless of whether this is done in the live or test environment, should be done using the format application/x-www-form-urlencoded . Please note that humm adopts the convention of prefixing the various key names with x_ . Below is an overview of the various key-value pairs that can be passed to humm ( Request Values ), a description of what they are as well as an indication of whether they are mandatory or optional.","title":"Request POST"},{"location":"developer_resources/checkout_api/#request-values","text":"Key Description Type Example Length x_account_id Required This is a unique Merchant ID that is assigned by humm to individual merchants unicode string 123456 10 x_amount Required Represents the transaction's total amount including any taxes and shipping costs decimal 99.90 12 x_currency Required Currency of the transaction ISO-4217 %currency_abbr% 3 x_customer_billing_address1 Billing address line 1 unicode string %address_street_1% 200 x_customer_billing_address2 Billing address line 2 unicode string %address_street_2% 200 x_customer_billing_city Billing city unicode string %address_city% 200 x_customer_billing_country Billing country iso-3166-1 alpha-2 %country_abbr% 3 x_customer_billing_state Billing state unicode string %address_state_abbr% 200 x_customer_billing_postcode Billing postcode unicode string %address_post_code% 200 x_customer_email Billing email address unicode string user@example.com 65 x_customer_first_name Customer's first name unicode string John 50 x_customer_last_name Customer's last name unicode string Appleseed 50 x_customer_phone Customer's phone number unicode string %address_phone_number% 12 x_customer_shipping_address1 Shipping address line 1 unicode string %address_street_1% 200 x_customer_shipping_address2 Shipping address line 2 unicode string %address_street_2% 200 x_customer_shipping_city Shipping city unicode string %address_city% 200 x_customer_shipping_country Shipping country unicode string %country_abbr% 3 x_customer_shipping_first_name Customer's first name (Shipping) unicode string John 50 x_customer_shipping_last_name Customer's last name (Shipping) unicode string Appleseed 50 x_customer_shipping_phone Customer's phone number (Shipping) unicode string %address_phone_number% 12 x_customer_shipping_state Shipping state unicode string %address_state_abbr% 200 x_customer_shipping_postcode Shipping postcode unicode string %address_post_code% 200 x_description Item's description as setup in the shopping cart unicode string Order #767 200 x_reference Required A reference that uniquely references the order and assigned by the merchant. This is unique to the shopping cart. ascii string (max length 250 bytes) 19783 250 x_shop_country Required Country of where the merchant's store is located iso-3166-1alpha-2 %country_abbr% 3 x_shop_name Required Store name as advertised on the internet, TV and other media Shop Inc 200 x_signature Required Request payload that is signed/verified using HMAC-SHA256 hex string, case-insensitive See Signature Generation 64 x_url_callback Required Callback notifications are sent asynchronously to this URL. The protocol must be HTTPS URL https://shop%domain_postfix%/callback 200 x_url_cancel Required Customers are redirected to this URL if they want to quit their humm transaction and return to the shopping cart store instead URL https://shop%domain_postfix%/cancel 200 x_url_complete Required Customers are redirected to this URL if they have successfully processed their transaction using humm URL https://shop%domain_postfix%/compete 200 x_transaction_timeout Transaction timout in minutes. Maximum value is 1440. int 60","title":"Request values"},{"location":"developer_resources/checkout_api/#sample-post","text":"Below is a sample request that might be posted to an humm gateway that is in the application/x-www-form-urlencoded format. In this example, please ignore values for individual keys - such as the value for x_signature - since this sample POST is for demonstration purposes only and does not demonstrate a real transaction that can be completed by humm . x_reference=123&x_account_id=1&x_amount=100.00&x_currency=%currency_abbr%&x_url_callback=sample_callback_url&x_url_complete=sample_complete_url&x_shop_country=%country_abbr%&x_shop_name=Sample+Shop&x_customer_first_name=first&x_customer_last_name=last&x_customer_email=sample%40email.com&x_customer_billing_country=%country_abbr%&x_customer_billing_city=%address_city%&x_customer_billing_address1=97+Pirie&x_customer_billing_address2=St&x_customer_billing_state=%address_state_abbr%&x_customer_billing_zip=%address_post_code%&x_description=Sample+Store+-+%123&x_url_cancel=sample_cancel_url&x_signature=dummy_signature","title":"Sample POST"},{"location":"developer_resources/checkout_api/#post-and-get-responses","text":"There are two responses from humm . The first response that humm always performs is a server-to-server asynchronous POST to the shopping cart on the gateway specified in the x_url_callback and in the format application/x-www-form-urlencoded . Similar to the request POST, the response POST includes key-values pairs that are specific to that transaction and indicate things such as the outcome of that particular transaction if it has failed or is completed successfully for instance. The second response is a HTTP GET to the client on the URLs specified in x_url_complete . The key-value pairs included in this HTTP GET are the same as the POST values as shown below. Please note: The POST response must be sent over HTTPS. Consequently the x_url_callback field should specify the HTTPS has the protocol.","title":"POST and GET responses"},{"location":"developer_resources/checkout_api/#response-postget-values","text":"Below is an overview of the various response key-value pairs that humm returns after it has finished processing a transaction. Note that some of these key-value pairs echo corresponding key-value pairs in the request that humm receives - as is the case with x_currency for instance. Key Description Type Example x_account_id This is the Merchant ID assigned by humm to the merchant Unicode string 123456 x_reference A reference that uniquely references the order and assigned by the merchant ASCII string 19783 x_currency Currency of the transaction ISO-4217 %currency_abbr% x_test Indicates whether the transaction is to be processed as a live or a test transaction True/False False x_amount Represents the transaction's total amount including any taxes and shipping costs decimal 99.90 x_gateway_reference A reference for the authorisation issues by humm that is unique unique string 123 x_purchase_number A reference for the authorisation issues by humm that is unique. Same as x_gateway_reference unique string 123 x_timestamp Time at which the transaction is completed, in UTC format YYYY-MM-DDTHH:MM:SSZ iso-8601 in UTC 2017-06-24T12:11:43Z x_result Values that represent the outcome of a transaction Valid values are completed or failed completed x_signature Response payload that is signed/verified using HMAC-SHA256 hex string, case-insensitive See Signature Generation","title":"Response POST/GET values"},{"location":"developer_resources/checkout_api/#response-signature-validation","text":"The x_signature included in both the POST and GET responses must validated by the merchants server. Failure to do so could allow a third-party to tamper with the response. In the event that the provided x_signature does not match the calculated signature, the reponse should be disregarded. All fields recieved starting with x_ should be used to calculate the signature, except for x_signature itself. For further information please see Signature Generation .","title":"Response signature validation"},{"location":"developer_resources/checkout_api/#response-post-reply","text":"It is expected that the POST response will be replied to by the merchants server to confirm that the POST response was correctly received. The format of this response must be human-readable and not exceed 1000 characters. The expected key-value pairs of this reply are listed below. Key Description Type Example x_reference A reference that uniquely references the order and assigned by the merchant ASCII string 19783 x_result The status of the order in question according to the merchants server. This should not merely copy the status from the initial response POST ASCII string Approved, Declined, Paid, etc.","title":"Response POST reply"},{"location":"developer_resources/checkout_process/","text":"Checkout Process Below is a chart that summarises the flow of a transaction when processing it using humm . Step 1 : The customer places an order in a shopping cart providing details such as their first/last name, email address etc. The customer chooses humm as the payment method. Step 2 : The customer is redirected to the humm checkout gateway via a HTTP POST (See Request POST for details). Note that this post needs to be signed to ensure security (See Signature Generation for details). Step 3 : The customer will then complete the purchase via the humm Service. Customers that cancel will be redirected back to the x_url_cancel URL. Step 4 : Once a decision has been reached ('Approved' or 'Declined'), humm will POST (Server to Server) to the provided x_url_callback URL (See Response POST content). Step 5 : The customer is then presented with an 'Approved' or 'Declined' page. The customer is then redirected ( GET ) to the provided x_url_complete with the same response content as used in Step 4 . Step 6 : The transaction is now complete from humm 's side as well as the client's and shopping cart's point of views.","title":"Checkout Process"},{"location":"developer_resources/checkout_process/#checkout-process","text":"Below is a chart that summarises the flow of a transaction when processing it using humm . Step 1 : The customer places an order in a shopping cart providing details such as their first/last name, email address etc. The customer chooses humm as the payment method. Step 2 : The customer is redirected to the humm checkout gateway via a HTTP POST (See Request POST for details). Note that this post needs to be signed to ensure security (See Signature Generation for details). Step 3 : The customer will then complete the purchase via the humm Service. Customers that cancel will be redirected back to the x_url_cancel URL. Step 4 : Once a decision has been reached ('Approved' or 'Declined'), humm will POST (Server to Server) to the provided x_url_callback URL (See Response POST content). Step 5 : The customer is then presented with an 'Approved' or 'Declined' page. The customer is then redirected ( GET ) to the provided x_url_complete with the same response content as used in Step 4 . Step 6 : The transaction is now complete from humm 's side as well as the client's and shopping cart's point of views.","title":"Checkout Process"},{"location":"developer_resources/introduction/","text":"Introduction We have used this API ourselves to integrate humm as a payment option into a number of leading shopping cart platforms including Shopify, WooCommerce and Magento. Shopping carts vary in how they deal with and communicate transaction information and how they classify certain bits of information as either optional or mandatory. The humm Checkout API is intented to work with as many shopping carts as possible (regardless of whether they are SAAS or Plugin based and regardless or the programming language used.) In this guide, you will find instructions on the information you need to provide to humm and the formatting we expect. You will also find information on how to go about signing your request in order to protect against malicious attacks as well as session hijacking.","title":"Introduction"},{"location":"developer_resources/introduction/#introduction","text":"We have used this API ourselves to integrate humm as a payment option into a number of leading shopping cart platforms including Shopify, WooCommerce and Magento. Shopping carts vary in how they deal with and communicate transaction information and how they classify certain bits of information as either optional or mandatory. The humm Checkout API is intented to work with as many shopping carts as possible (regardless of whether they are SAAS or Plugin based and regardless or the programming language used.) In this guide, you will find instructions on the information you need to provide to humm and the formatting we expect. You will also find information on how to go about signing your request in order to protect against malicious attacks as well as session hijacking.","title":"Introduction"},{"location":"developer_resources/refund_api/","text":"Refund API Humm provides an API to programmatically process refunds or adjustments to an humm purchase. Humm Endpoints Humm Environment URL Production Endpoint https://buyerapi.%domain%/api/ExternalRefund/v1/processrefund Sandbox Endpoint https://integration-buyerapi.%domain%/api/ExternalRefund/v1/processrefund Request Headers Key Value Content-Type application/json Body { \"x_merchant_number\": \"30199250\", \"x_purchase_number\": \"52004168\", \"x_amount\": \"10.00\", \"x_reason\": \"Test refund\", \"signature\": \"e39ae5f3233f561162836989e050c1b61ba9e3d5eb3d64d4b3701e95fb5850a1\" } See Signature Generation for information on how to generate the HMAC Signature. Response HTTP Status Reason Code Reason Description 204 none Success 400 MERR0001 API Key Not found 400 MERR0003 Refund Failed 400 MERR0004 Invalid Request 401 none Failed Signature Check Example The following curl command will allow you to test the refunds API. You will need to substitute your x_merchant_number, x_purchase_number and signature curl \\ --header \"Content-Type:application/json\" \\ --request POST \\ --data '{ \"x_merchant_number\": \"30199250\", \"x_purchase_number\": \"52000152\", \"x_amount\": 45.00, \"x_reason\": \"test\", \"signature\": \"a5fc92ddd2326c6099bd0f43bbe75afb54004a6ba68f354cc2b40328341d8ee2\" }' \\ https://integration-buyerapi.%domain%/api/ExternalRefund/v1/processrefund","title":"Refund API"},{"location":"developer_resources/refund_api/#refund-api","text":"Humm provides an API to programmatically process refunds or adjustments to an humm purchase.","title":"Refund API"},{"location":"developer_resources/refund_api/#humm-endpoints","text":"Humm Environment URL Production Endpoint https://buyerapi.%domain%/api/ExternalRefund/v1/processrefund Sandbox Endpoint https://integration-buyerapi.%domain%/api/ExternalRefund/v1/processrefund","title":"Humm Endpoints"},{"location":"developer_resources/refund_api/#request","text":"","title":"Request"},{"location":"developer_resources/refund_api/#headers","text":"Key Value Content-Type application/json","title":"Headers"},{"location":"developer_resources/refund_api/#body","text":"{ \"x_merchant_number\": \"30199250\", \"x_purchase_number\": \"52004168\", \"x_amount\": \"10.00\", \"x_reason\": \"Test refund\", \"signature\": \"e39ae5f3233f561162836989e050c1b61ba9e3d5eb3d64d4b3701e95fb5850a1\" } See Signature Generation for information on how to generate the HMAC Signature.","title":"Body"},{"location":"developer_resources/refund_api/#response","text":"HTTP Status Reason Code Reason Description 204 none Success 400 MERR0001 API Key Not found 400 MERR0003 Refund Failed 400 MERR0004 Invalid Request 401 none Failed Signature Check","title":"Response"},{"location":"developer_resources/refund_api/#example","text":"The following curl command will allow you to test the refunds API. You will need to substitute your x_merchant_number, x_purchase_number and signature curl \\ --header \"Content-Type:application/json\" \\ --request POST \\ --data '{ \"x_merchant_number\": \"30199250\", \"x_purchase_number\": \"52000152\", \"x_amount\": 45.00, \"x_reason\": \"test\", \"signature\": \"a5fc92ddd2326c6099bd0f43bbe75afb54004a6ba68f354cc2b40328341d8ee2\" }' \\ https://integration-buyerapi.%domain%/api/ExternalRefund/v1/processrefund","title":"Example"},{"location":"developer_resources/sample_curl/","text":"Sample cURL Script Below is a sample cURL script that you can use to test the humm test (sandbox) gateway. curl 'https://securesandbox.%domain%/Checkout?platform=Default' -H 'Content-Type: application/x-www-form-urlencoded' -X POST -d 'x_account_id=%merchantID_for_curl%&x_currency=%currency_abbr%&x_amount=89&x_reference=9051364487&x_shop_country=%country_abbr%&x_shop_name=Example+Store&x_transaction_type=&x_description=Tim%27s+Pet+Store&x_invoice=239051364487&x_test=true&x_customer_first_name=John&x_customer_last_name=Citizen&x_customer_email=john.citizen%40example.com&x_customer_billing_address1=some+address&x_customer_billing_address2=&x_customer_billing_city=%address_city%&x_customer_billing_state=%address_state_abbr%&x_customer_billing_zip=%address_post_code%&x_url_callback=http%3A%2F%2Fexample.com%2Fcallback.php&x_url_cancel=http%3A%2F%2Fexample.com%2Fcart.php&x_url_complete=http%3A%2F%2Fexample.com%2Fcomplete.php&x_signature=%signature_for_curl%'","title":"Sample cURL Script"},{"location":"developer_resources/sample_curl/#sample-curl-script","text":"Below is a sample cURL script that you can use to test the humm test (sandbox) gateway. curl 'https://securesandbox.%domain%/Checkout?platform=Default' -H 'Content-Type: application/x-www-form-urlencoded' -X POST -d 'x_account_id=%merchantID_for_curl%&x_currency=%currency_abbr%&x_amount=89&x_reference=9051364487&x_shop_country=%country_abbr%&x_shop_name=Example+Store&x_transaction_type=&x_description=Tim%27s+Pet+Store&x_invoice=239051364487&x_test=true&x_customer_first_name=John&x_customer_last_name=Citizen&x_customer_email=john.citizen%40example.com&x_customer_billing_address1=some+address&x_customer_billing_address2=&x_customer_billing_city=%address_city%&x_customer_billing_state=%address_state_abbr%&x_customer_billing_zip=%address_post_code%&x_url_callback=http%3A%2F%2Fexample.com%2Fcallback.php&x_url_cancel=http%3A%2F%2Fexample.com%2Fcart.php&x_url_complete=http%3A%2F%2Fexample.com%2Fcomplete.php&x_signature=%signature_for_curl%'","title":"Sample cURL Script"},{"location":"developer_resources/signature_generation/","text":"Signature Generation To prevent against malicious attacks, humm implements HMAC-SHA256 signing. We explain how to use HMAC-SHA256 for signing and verification purposes. There are two instances where signature generation is required: When sending a POST request to humm When receiving both a response POST or GET from humm PHP Example Below is a PHP example on how you can implement a method for signature generation. function humm_sign($query, $api_key ) { $clear_text = ''; ksort($query); foreach ($query as $key => $value) { if (substr($key, 0, 2) === \"x_\" && $key !== \"x_signature\") { $clear_text .= $key . $value; } } $hash = hash_hmac( \"sha256\", $clear_text, $api_key); return str_replace('-', '', $hash); } The method expects two parameters: $query and $api_key : * $query represents the various key-value pairs that form your HTTP request POST and vary depending on the information that is entered as part of the checkout process on your shopping cart. $api_key represents the merchant's unique API Key that. It should remain the same and only changes if changed by humm . Having received the two parameters, humm _sign method thens perform alphabetical sorting of the various key-value pairs based on the key but still maintaining the correlation between the keys and their respective values. It then examines the query $query variable for the various key-value pairs by checking for the x_ prefix and then appends them together. Note: When signing a request, all fields starting with x_ must be used, except for x_signature . The method then computes the keyed hash value using the hash_hmac method. Java Example import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import javax.crypto.Mac; import javax.crypto.spec.SecretKeySpec; import java.security.InvalidKeyException; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.binary.Base64; import java.security.NoSuchAlgorithmException; import java.io.UnsupportedEncodingException; import java.nio.charset.Charset; import java.util.HashMap; import java.util.List; import java.util.Set; class Main { private static final String _merchantId = \"<insert your merchantId here>\"; private static final String _key = \"<insert your key here>\"; private static final String _hashAlgorithm = \"HmacSHA256\"; public static void main(String[] args) { HashMap<String, String> map = new HashMap<String, String>(); map.put(\"x_url_callback\", \"http://example.com/payments/humm/process\"); map.put(\"x_url_cancel\", \"http://example.com/payments/humm/cancel\"); map.put(\"x_url_complete\", \"http://example.com/payments/humm/process\"); map.put(\"x_account_id\", _merchantId); map.put(\"x_amount\", \"400.00\"); map.put(\"x_currency\", \"AUD\"); map.put(\"x_reference\", \"TestOrder1\"); map.put(\"x_shop_country\", \"AU\"); map.put(\"x_shop_name\", \"Humm Mugs\"); map.put(\"x_test\", \"false\"); String plainText = signatureGeneration(_key, map); System.out.println(\"Plain Text: \" + plainText); // generate the HMAC String hmac = signMessage(plainText, _key); System.out.println(\"HMAC \" + hmac); } public static String signatureGeneration(String gatewayKey, HashMap apiArgs) { String[] stringArray = Arrays.copyOf(apiArgs.keySet().toArray(), apiArgs.size(), String[].class); List<String> keys = Arrays.asList(stringArray); // Sort the List try { Collections.sort(keys); } catch (Exception e) { System.out.print(e.getMessage()); } String plainText = \"\"; for(String key : keys){ plainText += (key + apiArgs.get(key)); } return plainText; } private static String signMessage(String plainText, String key){ String signature = \"\"; try { Mac hmac = Mac.getInstance(_hashAlgorithm); SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(\"UTF-8\"), _hashAlgorithm); hmac.init(secretKey); signature = Hex.encodeHexString(hmac.doFinal(plainText.getBytes(\"UTF-8\"))); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } catch (InvalidKeyException e) { e.printStackTrace(); } catch (NoSuchAlgorithmException e) { System.out.format(\"You do not have the %s libraries installed\", _hashAlgorithm); } return signature; } } Go Example // RegistrationPayload required to register a device with humm type RegistrationPayload struct { MerchantID string `json:\"x_merchant_id\"` DeviceID string `json:\"x_device_id\"` DeviceToken string `json:\"x_device_token\"` OperatorID string `json:\"x_operator_id\"` FirmwareVersion string `json:\"x_firmware_version\"` POSVendor string `json:\"x_pos_vendor\"` TrackingData string `json:\"tracking_data,omitempty\"` Signature string `json:\"signature\"` } // AuthorisationPayload Payload used to send to humm type AuthorisationPayload struct { MerchantID string `json:\"x_merchant_id\"` DeviceID string `json:\"x_device_id\"` OperatorID string `json:\"x_operator_id\"` FirmwareVersion string `json:\"x_firmware_version\"` PosTransactionRef string `json:\"x_pos_transaction_ref\"` PreApprovalCode string `json:\"x_pre_approval_code\"` FinanceAmount string `json:\"x_finance_amount\"` PurchaseAmount string `json:\"x_purchase_amount\"` Signature string `json:\"signature\"` } // Response is the response returned from humm for both a CreateKey and Sales Adjustment type Response struct { PurchaseNumber string `json:\"x_purchase_number,omitempty\"` Status string `json:\"x_status,omitempty\"` Code string `json:\"x_code,omitempty\"` Message string `json:\"x_message\"` Key string `json:\"x_key,omitempty\"` Signature string `json:\"signature\"` } // SalesAdjustmentPayload holds a request to humm for the ProcessAdjustment type SalesAdjustmentPayload struct { PosTransactionRef string `json:\"x_pos_transaction_ref\"` PurchaseRef string `json:\"x_purchase_ref\"` MerchantID string `json:\"x_merchant_id\"` Amount string `json:\"x_amount,omitempty\"` DeviceID string `json:\"x_device_id,omitempty\"` OperatorID string `json:\"x_operator_id,omitempty\"` FirmwareVersion string `json:\"x_firmware_version,omitempty\"` TrackingData string `json:\"tracking_data,omitempty\"` Signature string `json:\"signature\"` } //Authenticate validates HMAC func (r *Response) Authenticate(key string) (bool, error) { responsePlainText := GeneratePlainTextSignature(r) if len(r.Signature) >= 0 { return CheckMAC([]byte(responsePlainText), []byte(r.Signature), []byte(key)) } return false, errors.New(\"Plaintext is signature is 0 length\") } // GeneratePlainTextSignature will generate an humm plain text message ready for signing func GeneratePlainTextSignature(payload interface{}) string { var buffer bytes.Buffer // create a temporary map so we can sort the keys, // go intentionally randomises maps so we need to // store the keys in an array which we can sort v := reflect.TypeOf(payload).Elem() y := reflect.ValueOf(payload) if y.IsNil() { return \"\" } x := y.Elem() payloadList := make(map[string]string, x.NumField()) for i := 0; i < x.NumField(); i++ { field := x.Field(i) ftype := v.Field(i) data := field.Interface() tag := ftype.Tag.Get(\"json\") idx := strings.Index(tag, \",\") if idx > 0 { tag = tag[:idx] } payloadList[tag] = data.(string) } var keys []string for k := range payloadList { keys = append(keys, k) } sort.Strings(keys) for _, v := range keys { // there shouldn't be any nil values // Signature needs to be populated with the actual HMAC // calld if v[0:2] == \"x_\" && payloadList[v] != \"\" { buffer.WriteString(fmt.Sprintf(\"%s%s\", v, payloadList[v])) } } plainText := buffer.String() return plainText } // SignMessage will generate an HMAC of the plaintext func SignMessage(plainText string, signingKey string) string { key := []byte(signingKey) mac := hmac.New(sha256.New, key) mac.Write([]byte(plainText)) macString := hex.EncodeToString(mac.Sum(nil)) return macString }","title":"Signature Generation"},{"location":"developer_resources/signature_generation/#signature-generation","text":"To prevent against malicious attacks, humm implements HMAC-SHA256 signing. We explain how to use HMAC-SHA256 for signing and verification purposes. There are two instances where signature generation is required: When sending a POST request to humm When receiving both a response POST or GET from humm","title":"Signature Generation"},{"location":"developer_resources/signature_generation/#php-example","text":"Below is a PHP example on how you can implement a method for signature generation. function humm_sign($query, $api_key ) { $clear_text = ''; ksort($query); foreach ($query as $key => $value) { if (substr($key, 0, 2) === \"x_\" && $key !== \"x_signature\") { $clear_text .= $key . $value; } } $hash = hash_hmac( \"sha256\", $clear_text, $api_key); return str_replace('-', '', $hash); } The method expects two parameters: $query and $api_key : * $query represents the various key-value pairs that form your HTTP request POST and vary depending on the information that is entered as part of the checkout process on your shopping cart. $api_key represents the merchant's unique API Key that. It should remain the same and only changes if changed by humm . Having received the two parameters, humm _sign method thens perform alphabetical sorting of the various key-value pairs based on the key but still maintaining the correlation between the keys and their respective values. It then examines the query $query variable for the various key-value pairs by checking for the x_ prefix and then appends them together. Note: When signing a request, all fields starting with x_ must be used, except for x_signature . The method then computes the keyed hash value using the hash_hmac method.","title":"PHP Example"},{"location":"developer_resources/signature_generation/#java-example","text":"import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import javax.crypto.Mac; import javax.crypto.spec.SecretKeySpec; import java.security.InvalidKeyException; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.binary.Base64; import java.security.NoSuchAlgorithmException; import java.io.UnsupportedEncodingException; import java.nio.charset.Charset; import java.util.HashMap; import java.util.List; import java.util.Set; class Main { private static final String _merchantId = \"<insert your merchantId here>\"; private static final String _key = \"<insert your key here>\"; private static final String _hashAlgorithm = \"HmacSHA256\"; public static void main(String[] args) { HashMap<String, String> map = new HashMap<String, String>(); map.put(\"x_url_callback\", \"http://example.com/payments/humm/process\"); map.put(\"x_url_cancel\", \"http://example.com/payments/humm/cancel\"); map.put(\"x_url_complete\", \"http://example.com/payments/humm/process\"); map.put(\"x_account_id\", _merchantId); map.put(\"x_amount\", \"400.00\"); map.put(\"x_currency\", \"AUD\"); map.put(\"x_reference\", \"TestOrder1\"); map.put(\"x_shop_country\", \"AU\"); map.put(\"x_shop_name\", \"Humm Mugs\"); map.put(\"x_test\", \"false\"); String plainText = signatureGeneration(_key, map); System.out.println(\"Plain Text: \" + plainText); // generate the HMAC String hmac = signMessage(plainText, _key); System.out.println(\"HMAC \" + hmac); } public static String signatureGeneration(String gatewayKey, HashMap apiArgs) { String[] stringArray = Arrays.copyOf(apiArgs.keySet().toArray(), apiArgs.size(), String[].class); List<String> keys = Arrays.asList(stringArray); // Sort the List try { Collections.sort(keys); } catch (Exception e) { System.out.print(e.getMessage()); } String plainText = \"\"; for(String key : keys){ plainText += (key + apiArgs.get(key)); } return plainText; } private static String signMessage(String plainText, String key){ String signature = \"\"; try { Mac hmac = Mac.getInstance(_hashAlgorithm); SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(\"UTF-8\"), _hashAlgorithm); hmac.init(secretKey); signature = Hex.encodeHexString(hmac.doFinal(plainText.getBytes(\"UTF-8\"))); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } catch (InvalidKeyException e) { e.printStackTrace(); } catch (NoSuchAlgorithmException e) { System.out.format(\"You do not have the %s libraries installed\", _hashAlgorithm); } return signature; } }","title":"Java Example"},{"location":"developer_resources/signature_generation/#go-example","text":"// RegistrationPayload required to register a device with humm type RegistrationPayload struct { MerchantID string `json:\"x_merchant_id\"` DeviceID string `json:\"x_device_id\"` DeviceToken string `json:\"x_device_token\"` OperatorID string `json:\"x_operator_id\"` FirmwareVersion string `json:\"x_firmware_version\"` POSVendor string `json:\"x_pos_vendor\"` TrackingData string `json:\"tracking_data,omitempty\"` Signature string `json:\"signature\"` } // AuthorisationPayload Payload used to send to humm type AuthorisationPayload struct { MerchantID string `json:\"x_merchant_id\"` DeviceID string `json:\"x_device_id\"` OperatorID string `json:\"x_operator_id\"` FirmwareVersion string `json:\"x_firmware_version\"` PosTransactionRef string `json:\"x_pos_transaction_ref\"` PreApprovalCode string `json:\"x_pre_approval_code\"` FinanceAmount string `json:\"x_finance_amount\"` PurchaseAmount string `json:\"x_purchase_amount\"` Signature string `json:\"signature\"` } // Response is the response returned from humm for both a CreateKey and Sales Adjustment type Response struct { PurchaseNumber string `json:\"x_purchase_number,omitempty\"` Status string `json:\"x_status,omitempty\"` Code string `json:\"x_code,omitempty\"` Message string `json:\"x_message\"` Key string `json:\"x_key,omitempty\"` Signature string `json:\"signature\"` } // SalesAdjustmentPayload holds a request to humm for the ProcessAdjustment type SalesAdjustmentPayload struct { PosTransactionRef string `json:\"x_pos_transaction_ref\"` PurchaseRef string `json:\"x_purchase_ref\"` MerchantID string `json:\"x_merchant_id\"` Amount string `json:\"x_amount,omitempty\"` DeviceID string `json:\"x_device_id,omitempty\"` OperatorID string `json:\"x_operator_id,omitempty\"` FirmwareVersion string `json:\"x_firmware_version,omitempty\"` TrackingData string `json:\"tracking_data,omitempty\"` Signature string `json:\"signature\"` } //Authenticate validates HMAC func (r *Response) Authenticate(key string) (bool, error) { responsePlainText := GeneratePlainTextSignature(r) if len(r.Signature) >= 0 { return CheckMAC([]byte(responsePlainText), []byte(r.Signature), []byte(key)) } return false, errors.New(\"Plaintext is signature is 0 length\") } // GeneratePlainTextSignature will generate an humm plain text message ready for signing func GeneratePlainTextSignature(payload interface{}) string { var buffer bytes.Buffer // create a temporary map so we can sort the keys, // go intentionally randomises maps so we need to // store the keys in an array which we can sort v := reflect.TypeOf(payload).Elem() y := reflect.ValueOf(payload) if y.IsNil() { return \"\" } x := y.Elem() payloadList := make(map[string]string, x.NumField()) for i := 0; i < x.NumField(); i++ { field := x.Field(i) ftype := v.Field(i) data := field.Interface() tag := ftype.Tag.Get(\"json\") idx := strings.Index(tag, \",\") if idx > 0 { tag = tag[:idx] } payloadList[tag] = data.(string) } var keys []string for k := range payloadList { keys = append(keys, k) } sort.Strings(keys) for _, v := range keys { // there shouldn't be any nil values // Signature needs to be populated with the actual HMAC // calld if v[0:2] == \"x_\" && payloadList[v] != \"\" { buffer.WriteString(fmt.Sprintf(\"%s%s\", v, payloadList[v])) } } plainText := buffer.String() return plainText } // SignMessage will generate an HMAC of the plaintext func SignMessage(plainText string, signingKey string) string { key := []byte(signingKey) mac := hmac.New(sha256.New, key) mac.Write([]byte(plainText)) macString := hex.EncodeToString(mac.Sum(nil)) return macString }","title":"Go Example"},{"location":"ecommerce/cubecart/","text":"Setting up humm on a CubeCart Store This document outlines the steps needed to install humm on your CubeCart Store. humm was tested against CubeCart version 6.1.1 , however, should be compatible against other versions. Installing humm You will need a Merchant ID and API Key before continuing with the installation procedure. They are required to uniquely identify the Merchant and provide a secure link. If you don't have either of these, please contact support@%domain% The plugin can be installed via CubeCart's Admin Control Panel, either manually or automatically using a Token. This section details how to upload the plugin, and install and configure its various parameters for it to work properly. If you have trouble accessing your CubeCart's Admin Control Panel, please consult CubeCart's official knowledgebase and forums , or your IT department to resolve the issue. Automatic Installation using Token 1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the lightning bolt button, next to your required humm plugin version, to reveal the Auto Install/Upgrade Token 3 - Copy the Token from within the pop-up. 4 - Log into the CubeCart Admin Control Panel as an Administrator. 5 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 6 - Copy the Auto Install/Upgrade Token into the Token field on the Manage Extensions page and select the Go button. 7 - If the module has been installed correctly, the module will appear in the list of Available Extensions . If the automatic installation is not successful, you will be presented with a message at the top of the page similar to the screenshot below. If this continues to be a problem, please refer to the Manual Installation procedure. Manual Installation 1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the download button , next to your required humm plugin version, to download the humm plugin ZIP file. 3 - Extract the ZIP file and copy the contents to the modules/gateway folder of your server\u2019s/site directory. 4 - Ensure the folders/files have adequate read/write permissions set. 5 - Log into the CubeCart Admin Control Panel as an Administrator. 6 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 7 - If the module has been installed correctly, the module will appear in the list of Available Extensions . Configuring humm This section describes the Module Settings available once you have installed the **humm** plugin. This includes the **humm** gateways to communicate with, as well as whether or not to enable Test Mode. 1 - Log into the CubeCart Admin Control Panel as an Administrator. 2 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 3 - Under the Available Extensions section, select the text Humm to configure the module settings. Descriptions of the options are listed below. We have intentionally masked the Merchant ID and API Key in this support document. Please contact us and we will advise you of the settings to use. Status This must be enabled for the payment options to appear during checkout. Priority If you have more than one payment gateway, please use this field to define the order they are shown in. A setting of '1' will show it first, '2' second, etc. Scope This allows you to specify whether you want the humm plugin to be available via the Main Website only or the Mobile Website only, or both. Default This must be enabled if you would like humm pre-selected for the Customer as the default payment option. Merchant ID This is the humm Merchant ID that you are provided with as part of your on-boarding when signing-up for humm . API Key The API Key or the Encryption key is a case-sensitive alpha-numeric sequence that is used to authenticate payment requests originating from your Store. It is vital that you protect it and don't provide it to unauthorised individuals. Test Mode Indicates whether to process payments over the live humm Gateway URL resulting in real transactions, or to process it over the humm Sandbox Gateway URL which will produce simulated (test) transactions with no real dollar amounts being debited. By default it should be set to No unless we are attempting to diagnose issues on your store to do with humm , or you're testing integrating the plugin with your online CubeCart store. Test Gateway URL This specifies the test humm end-point that the plugin would need to communicate with when Test Mode is enabled. This is mainly used for troubleshooting purposes, particularly if we want to simulate test transactions on your CubeCart Store without having real dollar amounts debited from Credit Cards. Gateway URL This specifies the live humm end-point that the plugin would need to communicate with for it to be able to process payments via humm . Note that transactions processed over this URL are real transactions that end up in real dollar amounts being deducted. 4 - Once you have finished making the necessary configuration changes, click the Save button. 5 - %country% will be automatically set as an Enabled Region in the Allowed Zones tab. This must match the Country set in the CubeCart Store Settings. Upgrading humm Automatic Upgrade Importantly, when you perform an automatic upgrade, all the module settings are retained. That is, you do not need to type in your Merchant ID and API Key again. 1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the lightning bolt button, next to your required humm plugin version, to reveal the Auto Install/Upgrade Token 3 - Copy the Token from within the pop-up. 4 - Log into the CubeCart Admin Control Panel as an Administrator. 5 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 6 - Copy the Auto Install/Upgrade Token into the Token field on the Manage Extensions page. 7 - If you enable the option to Backup if already exists , a backup of the previous plugin version will be created. 8 - Select the Go button to complete the upgrade. Manual Upgrade Prior to manually upgrading, you will first need to un-install the previous version. Un-installing humm 1 - Log into the CubeCart Admin Control Panel as an Administrator. 2 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 3 - In the list of Available Extensions , select the delete button associated with the Humm extension. 4 - If the module has been un-installed correctly, the module will no longer appear in the list of Available Extensions . 5 - You can now download the new version of the humm CubeCart plugin and install it as per the instructions in the Installing humm section of this document.","title":"CubeCart"},{"location":"ecommerce/cubecart/#setting-up-humm-on-a-cubecart-store","text":"This document outlines the steps needed to install humm on your CubeCart Store. humm was tested against CubeCart version 6.1.1 , however, should be compatible against other versions.","title":"Setting up humm on a CubeCart Store"},{"location":"ecommerce/cubecart/#installing-humm","text":"You will need a Merchant ID and API Key before continuing with the installation procedure. They are required to uniquely identify the Merchant and provide a secure link. If you don't have either of these, please contact support@%domain% The plugin can be installed via CubeCart's Admin Control Panel, either manually or automatically using a Token. This section details how to upload the plugin, and install and configure its various parameters for it to work properly. If you have trouble accessing your CubeCart's Admin Control Panel, please consult CubeCart's official knowledgebase and forums , or your IT department to resolve the issue.","title":"Installing humm"},{"location":"ecommerce/cubecart/#automatic-installation-using-token","text":"1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the lightning bolt button, next to your required humm plugin version, to reveal the Auto Install/Upgrade Token 3 - Copy the Token from within the pop-up. 4 - Log into the CubeCart Admin Control Panel as an Administrator. 5 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 6 - Copy the Auto Install/Upgrade Token into the Token field on the Manage Extensions page and select the Go button. 7 - If the module has been installed correctly, the module will appear in the list of Available Extensions . If the automatic installation is not successful, you will be presented with a message at the top of the page similar to the screenshot below. If this continues to be a problem, please refer to the Manual Installation procedure.","title":"Automatic Installation using Token"},{"location":"ecommerce/cubecart/#manual-installation","text":"1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the download button , next to your required humm plugin version, to download the humm plugin ZIP file. 3 - Extract the ZIP file and copy the contents to the modules/gateway folder of your server\u2019s/site directory. 4 - Ensure the folders/files have adequate read/write permissions set. 5 - Log into the CubeCart Admin Control Panel as an Administrator. 6 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 7 - If the module has been installed correctly, the module will appear in the list of Available Extensions .","title":"Manual Installation"},{"location":"ecommerce/cubecart/#configuring-humm","text":"This section describes the Module Settings available once you have installed the **humm** plugin. This includes the **humm** gateways to communicate with, as well as whether or not to enable Test Mode. 1 - Log into the CubeCart Admin Control Panel as an Administrator. 2 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 3 - Under the Available Extensions section, select the text Humm to configure the module settings. Descriptions of the options are listed below. We have intentionally masked the Merchant ID and API Key in this support document. Please contact us and we will advise you of the settings to use. Status This must be enabled for the payment options to appear during checkout. Priority If you have more than one payment gateway, please use this field to define the order they are shown in. A setting of '1' will show it first, '2' second, etc. Scope This allows you to specify whether you want the humm plugin to be available via the Main Website only or the Mobile Website only, or both. Default This must be enabled if you would like humm pre-selected for the Customer as the default payment option. Merchant ID This is the humm Merchant ID that you are provided with as part of your on-boarding when signing-up for humm . API Key The API Key or the Encryption key is a case-sensitive alpha-numeric sequence that is used to authenticate payment requests originating from your Store. It is vital that you protect it and don't provide it to unauthorised individuals. Test Mode Indicates whether to process payments over the live humm Gateway URL resulting in real transactions, or to process it over the humm Sandbox Gateway URL which will produce simulated (test) transactions with no real dollar amounts being debited. By default it should be set to No unless we are attempting to diagnose issues on your store to do with humm , or you're testing integrating the plugin with your online CubeCart store. Test Gateway URL This specifies the test humm end-point that the plugin would need to communicate with when Test Mode is enabled. This is mainly used for troubleshooting purposes, particularly if we want to simulate test transactions on your CubeCart Store without having real dollar amounts debited from Credit Cards. Gateway URL This specifies the live humm end-point that the plugin would need to communicate with for it to be able to process payments via humm . Note that transactions processed over this URL are real transactions that end up in real dollar amounts being deducted. 4 - Once you have finished making the necessary configuration changes, click the Save button. 5 - %country% will be automatically set as an Enabled Region in the Allowed Zones tab. This must match the Country set in the CubeCart Store Settings.","title":"Configuring humm"},{"location":"ecommerce/cubecart/#upgrading-humm","text":"","title":"Upgrading humm"},{"location":"ecommerce/cubecart/#automatic-upgrade","text":"Importantly, when you perform an automatic upgrade, all the module settings are retained. That is, you do not need to type in your Merchant ID and API Key again. 1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the lightning bolt button, next to your required humm plugin version, to reveal the Auto Install/Upgrade Token 3 - Copy the Token from within the pop-up. 4 - Log into the CubeCart Admin Control Panel as an Administrator. 5 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 6 - Copy the Auto Install/Upgrade Token into the Token field on the Manage Extensions page. 7 - If you enable the option to Backup if already exists , a backup of the previous plugin version will be created. 8 - Select the Go button to complete the upgrade.","title":"Automatic Upgrade"},{"location":"ecommerce/cubecart/#manual-upgrade","text":"Prior to manually upgrading, you will first need to un-install the previous version.","title":"Manual Upgrade"},{"location":"ecommerce/cubecart/#un-installing-humm","text":"1 - Log into the CubeCart Admin Control Panel as an Administrator. 2 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 3 - In the list of Available Extensions , select the delete button associated with the Humm extension. 4 - If the module has been un-installed correctly, the module will no longer appear in the list of Available Extensions . 5 - You can now download the new version of the humm CubeCart plugin and install it as per the instructions in the Installing humm section of this document.","title":"Un-installing humm"},{"location":"ecommerce/magento_1/","text":"Magento 1 Locate your humm Credentials To integrate humm you will need your Merchant Number API Key Plugin Installation / Upgrade 1 - You can create a backup of your store by navigating to System -> Tools -> Backup . 2 - Download the humm plugin zip from GitHub . 3 - Unzip it, then copy the following folders into the corresponding folders under your Magento root directory. app/ skin/ 4 - Login into Magento's Admin Panel , click on System then select Cache Management . 5 - On the Cache Management page, click on Flush Magento Cache . Configuration 1 - Navigating to System > Configuration . 2 - On Configuration page, scroll downwards then click on Payment Methods on left side menu. 3 - Confirm humm Checkout is visible and once expanded looks similar to the image below. Varnish Cache If your server utilises a Varnish cache it is important that you whitelist any URLs associated with the humm plugin. This should at least include the following: YOUR_DOMAIN/HummPayments/payment/start/ YOUR_DOMAIN/HummPayments/payment/cancel/ YOUR_DOMAIN/HummPayments/payment/complete/ The endpoints listed here should also be whitelisted.","title":"Magento 1"},{"location":"ecommerce/magento_1/#magento-1","text":"","title":"Magento 1"},{"location":"ecommerce/magento_1/#locate-your-humm-credentials","text":"To integrate humm you will need your Merchant Number API Key","title":"Locate your humm Credentials"},{"location":"ecommerce/magento_1/#plugin-installation-upgrade","text":"1 - You can create a backup of your store by navigating to System -> Tools -> Backup . 2 - Download the humm plugin zip from GitHub . 3 - Unzip it, then copy the following folders into the corresponding folders under your Magento root directory. app/ skin/ 4 - Login into Magento's Admin Panel , click on System then select Cache Management . 5 - On the Cache Management page, click on Flush Magento Cache .","title":"Plugin Installation / Upgrade"},{"location":"ecommerce/magento_1/#configuration","text":"1 - Navigating to System > Configuration . 2 - On Configuration page, scroll downwards then click on Payment Methods on left side menu. 3 - Confirm humm Checkout is visible and once expanded looks similar to the image below.","title":"Configuration"},{"location":"ecommerce/magento_1/#varnish-cache","text":"If your server utilises a Varnish cache it is important that you whitelist any URLs associated with the humm plugin. This should at least include the following: YOUR_DOMAIN/HummPayments/payment/start/ YOUR_DOMAIN/HummPayments/payment/cancel/ YOUR_DOMAIN/HummPayments/payment/complete/ The endpoints listed here should also be whitelisted.","title":"Varnish Cache"},{"location":"ecommerce/magento_2/","text":"Integrating on Magento 2 Use the same instructions to upgrade the humm plugin to a newer release. Locate your humm Credentials To integrate humm you will need your Merchant Number API Key Integrating humm using Composer Add the humm repository, in Magento's root directory composer config repositories.shophumm git https://github.com/shophumm/humm-magento2.x.git Require the Humm Payment Gateway Module composer require humm/module-humm-payment-gateway:dev-master Enable the module ./bin/magento module:enable Humm_HummPaymentGateway --clear-static-content Update the database ./bin/magento setup:upgrade Configure humm Integrating humm Manually 1 - Download the humm plugin zip from GitHub . 2 - Unzip it then copy the inner Humm folder into the MAGENTO_DIR/app/code directory on your webserver. If the code folder doesn't exist, then create it manually. 3 - Run MAGENTO_DIR/bin/magento setup:upgrade to enable humm . You should see Module 'Humm_HummPaymentGateway' in the output of the command. Depending on your tech stack, you might have to use the php prefix ( php MAGENTO_DIR/bin/magento setup:upgrade ) when running the various magento commands. 4 - Flush Magento's Cache: Settings -> Cache Management -> Flush Magento Cache . Alternatively, run MAGENTO_DIR/bin/magento cache:flush from command line. You may need to run MAGENTO_DIR/bin/magento setup:static-content:deploy . This is to avoid generated HTML referring to javascript/css that haven't been added to the list of compiled/minified assets which can break your store's front-end/admin panel. Configuration Navigate to Stores -> Configuration -> Sales -> Payment Methods . Varnish Cache If your server utilises a Varnish cache it is important that you whitelist any URLs associated with the humm plugin. This should at least include the following: * YOUR_DOMAIN/HummPayments/payment/start/ * YOUR_DOMAIN/HummPayments/payment/cancel/ * YOUR_DOMAIN/HummPayments/payment/complete/ The endpoints listed here should also be whitelisted","title":"Magento 2"},{"location":"ecommerce/magento_2/#integrating-on-magento-2","text":"Use the same instructions to upgrade the humm plugin to a newer release.","title":"Integrating on Magento 2"},{"location":"ecommerce/magento_2/#locate-your-humm-credentials","text":"To integrate humm you will need your Merchant Number API Key","title":"Locate your humm Credentials"},{"location":"ecommerce/magento_2/#integrating-humm-using-composer","text":"Add the humm repository, in Magento's root directory composer config repositories.shophumm git https://github.com/shophumm/humm-magento2.x.git Require the Humm Payment Gateway Module composer require humm/module-humm-payment-gateway:dev-master Enable the module ./bin/magento module:enable Humm_HummPaymentGateway --clear-static-content Update the database ./bin/magento setup:upgrade Configure humm","title":"Integrating humm using Composer"},{"location":"ecommerce/magento_2/#integrating-humm-manually","text":"1 - Download the humm plugin zip from GitHub . 2 - Unzip it then copy the inner Humm folder into the MAGENTO_DIR/app/code directory on your webserver. If the code folder doesn't exist, then create it manually. 3 - Run MAGENTO_DIR/bin/magento setup:upgrade to enable humm . You should see Module 'Humm_HummPaymentGateway' in the output of the command. Depending on your tech stack, you might have to use the php prefix ( php MAGENTO_DIR/bin/magento setup:upgrade ) when running the various magento commands. 4 - Flush Magento's Cache: Settings -> Cache Management -> Flush Magento Cache . Alternatively, run MAGENTO_DIR/bin/magento cache:flush from command line. You may need to run MAGENTO_DIR/bin/magento setup:static-content:deploy . This is to avoid generated HTML referring to javascript/css that haven't been added to the list of compiled/minified assets which can break your store's front-end/admin panel.","title":"Integrating humm Manually"},{"location":"ecommerce/magento_2/#configuration","text":"Navigate to Stores -> Configuration -> Sales -> Payment Methods .","title":"Configuration"},{"location":"ecommerce/magento_2/#varnish-cache","text":"If your server utilises a Varnish cache it is important that you whitelist any URLs associated with the humm plugin. This should at least include the following: * YOUR_DOMAIN/HummPayments/payment/start/ * YOUR_DOMAIN/HummPayments/payment/cancel/ * YOUR_DOMAIN/HummPayments/payment/complete/ The endpoints listed here should also be whitelisted","title":"Varnish Cache"},{"location":"ecommerce/opencart/","text":"Integrating on OpenCart Humm is available for the following versions of OpenCart: 2.0.x, 2.1.x, 2.2.x 2.3.x 3.0.x Locate your humm Credentials To integrate humm you will need your Merchant Number API Key Installation using Extension Installer The Extension Installer requires FTP settings to be configured. If it isn't, use manual installation instead. 1 - Download the latest extension for your OpenCart version here . 2 - From your OpenCart Admin , click Extensions > Installer . 3 - Click Upload then select the humm extension (ending with .ocmod.zip ). Next: Continue onto Finalising Installation below . Manual Installation 1 - Download the latest extension for your OpenCart version here . 2 - Unzip then copy contents of uploads folder into OpenCarts root folder. If upgrading humm , only humm files should be overwritten. Next: Continue onto Finalising Installation below . Finalising Installation 1 - Log into your OpenCart Admin then navigate to Extensions > Extensions . 2 - Select Payments from dropdown. 3 - Locate humm then click Install . 4 - Click Edit on the right, this will open your humm settings page. 5 - Ensure plugin is configured as below: Setting Description Status Enabled Order Status Completed Completed Order Status Pending Processing Order Status Failed Failed Geo Zone AU or NZ Environment Sandbox (Test) for testing else Live or Other. Sort Order 1 This will show humm first.","title":"OpenCart"},{"location":"ecommerce/opencart/#integrating-on-opencart","text":"Humm is available for the following versions of OpenCart: 2.0.x, 2.1.x, 2.2.x 2.3.x 3.0.x","title":"Integrating on OpenCart"},{"location":"ecommerce/opencart/#locate-your-humm-credentials","text":"To integrate humm you will need your Merchant Number API Key","title":"Locate your humm Credentials"},{"location":"ecommerce/opencart/#installation-using-extension-installer","text":"The Extension Installer requires FTP settings to be configured. If it isn't, use manual installation instead. 1 - Download the latest extension for your OpenCart version here . 2 - From your OpenCart Admin , click Extensions > Installer . 3 - Click Upload then select the humm extension (ending with .ocmod.zip ). Next: Continue onto Finalising Installation below .","title":"Installation using Extension Installer"},{"location":"ecommerce/opencart/#manual-installation","text":"1 - Download the latest extension for your OpenCart version here . 2 - Unzip then copy contents of uploads folder into OpenCarts root folder. If upgrading humm , only humm files should be overwritten. Next: Continue onto Finalising Installation below .","title":"Manual Installation"},{"location":"ecommerce/opencart/#finalising-installation","text":"1 - Log into your OpenCart Admin then navigate to Extensions > Extensions . 2 - Select Payments from dropdown. 3 - Locate humm then click Install . 4 - Click Edit on the right, this will open your humm settings page. 5 - Ensure plugin is configured as below: Setting Description Status Enabled Order Status Completed Completed Order Status Pending Processing Order Status Failed Failed Geo Zone AU or NZ Environment Sandbox (Test) for testing else Live or Other. Sort Order 1 This will show humm first.","title":"Finalising Installation"},{"location":"ecommerce/prestashop/","text":"Setting up on PrestaShop Locate your humm Credentials To integrate humm you will need your Merchant Number API Key Install the Plugin 1 - Download the humm plugin. PrestaShop 1.6: click here PrestaShop 1.7: click here 2 - In your store's admin area, click Modules and Services on the left. 4 - Click Add a new module in top-right. 5 - Click Choose a file , select the plugin, then click Upload this module . 7 - From Modules List at the bottom, click Install 8 - Then click Proceed with the Installation . Configuring humm 1 - In the Modules page, search for humm then click Configure . Setting Description Checkout Method Select humm Country AU or NZ Is Test? No Gateway URL Leave blank Updating the Plugin 1 - Navigate to Modules and Services . 2 - Find humm , then from the Configure drop-down select Delete > OK 4 - Install the new version of humm, see Installing the Plugin .","title":"PrestaShop"},{"location":"ecommerce/prestashop/#setting-up-on-prestashop","text":"","title":"Setting up on PrestaShop"},{"location":"ecommerce/prestashop/#locate-your-humm-credentials","text":"To integrate humm you will need your Merchant Number API Key","title":"Locate your humm Credentials"},{"location":"ecommerce/prestashop/#install-the-plugin","text":"1 - Download the humm plugin. PrestaShop 1.6: click here PrestaShop 1.7: click here 2 - In your store's admin area, click Modules and Services on the left. 4 - Click Add a new module in top-right. 5 - Click Choose a file , select the plugin, then click Upload this module . 7 - From Modules List at the bottom, click Install 8 - Then click Proceed with the Installation .","title":"Install the Plugin"},{"location":"ecommerce/prestashop/#configuring-humm","text":"1 - In the Modules page, search for humm then click Configure . Setting Description Checkout Method Select humm Country AU or NZ Is Test? No Gateway URL Leave blank","title":"Configuring humm"},{"location":"ecommerce/prestashop/#updating-the-plugin","text":"1 - Navigate to Modules and Services . 2 - Find humm , then from the Configure drop-down select Delete > OK 4 - Install the new version of humm, see Installing the Plugin .","title":"Updating the Plugin"},{"location":"ecommerce/prestashop_quick_config_actions/","text":"Quick Config Actions PrestaShop allows you to perform quick actions on your installed modules such as disabling the plugin on specific devices or uninstalling it. Although not technically part of the Quick Config Actions sub-menu, you also have access to the Configure button. Clicking on it will take you to the Humm Configuration . Below is a summary of how to bring up the Quick Config Actions sub-menu: 1 - Log into your PrestaShop admin panel. 2 - Hover over the Modules and Services option on the left side menu, then click on the Modules and Services item on the sub-menu that appears. 3 - This will re-direct you to the List of Modules page. 4 - Scroll down until you bring the Modules List panel into focus and type Humm in the search field in the panel's top left corner. This will bring the humm module into focus and filter out all other modules. 5 - If you want to bring up the full Humm Configuration page, then click on the Configure button. 6 - Otherwise, clicking on the arrow next to the Configure button will open a drop-down menu similar to the one shown in the screenshot below. Here is a quick summary of the various Configure options available to you: Disable : Disables the plugin but leaves it installed on your PrestaShop. You can re-enable it with its existing settings at a later time. Humm will not appear as a payment option on your store once disabled. Disable on mobiles : This option disables humm only on mobile devices (or smartphones, such as iPhones). This does not apply to tablets (such as iPads) or desktop computers. Disable on tablets : Disables humm on tablets but not smartphones or desktop computers. Disable on computers : Disables humm on desktop computers only. Reset : Resets the humm module to its original state without any of the configuration settings that have been applied post installation. Uninstall : Uninstalls the plugin from your store. The plugin will still be available and you will be able to install it at a later time without having to upload it again. Mark as Favorite : Marks humm as one of your favourite plugins so that it becomes available from within the Favourites category list on the left hand side of the Modules List panel. Delete : Completely removes the plugin from your store. The plugin will no longer be available for installation again and the only way to add humm back to your store as a payment method would be to perform the instructions in the Installing humm section of the document again.","title":"Prestashop quick config actions"},{"location":"ecommerce/prestashop_quick_config_actions/#quick-config-actions","text":"PrestaShop allows you to perform quick actions on your installed modules such as disabling the plugin on specific devices or uninstalling it. Although not technically part of the Quick Config Actions sub-menu, you also have access to the Configure button. Clicking on it will take you to the Humm Configuration . Below is a summary of how to bring up the Quick Config Actions sub-menu: 1 - Log into your PrestaShop admin panel. 2 - Hover over the Modules and Services option on the left side menu, then click on the Modules and Services item on the sub-menu that appears. 3 - This will re-direct you to the List of Modules page. 4 - Scroll down until you bring the Modules List panel into focus and type Humm in the search field in the panel's top left corner. This will bring the humm module into focus and filter out all other modules. 5 - If you want to bring up the full Humm Configuration page, then click on the Configure button. 6 - Otherwise, clicking on the arrow next to the Configure button will open a drop-down menu similar to the one shown in the screenshot below. Here is a quick summary of the various Configure options available to you: Disable : Disables the plugin but leaves it installed on your PrestaShop. You can re-enable it with its existing settings at a later time. Humm will not appear as a payment option on your store once disabled. Disable on mobiles : This option disables humm only on mobile devices (or smartphones, such as iPhones). This does not apply to tablets (such as iPads) or desktop computers. Disable on tablets : Disables humm on tablets but not smartphones or desktop computers. Disable on computers : Disables humm on desktop computers only. Reset : Resets the humm module to its original state without any of the configuration settings that have been applied post installation. Uninstall : Uninstalls the plugin from your store. The plugin will still be available and you will be able to install it at a later time without having to upload it again. Mark as Favorite : Marks humm as one of your favourite plugins so that it becomes available from within the Favourites category list on the left hand side of the Modules List panel. Delete : Completely removes the plugin from your store. The plugin will no longer be available for installation again and the only way to add humm back to your store as a payment method would be to perform the instructions in the Installing humm section of the document again.","title":"Quick Config Actions"},{"location":"ecommerce/shopify/","text":"Integrating on Shopify Locate your humm Credentials To integrate humm you will need your Merchant Number API Key Integrating humm 1 \u2013 Email pit@%domain% with your merchant ID and mobile number for the humm Gateway Authorisation URL . 2 - Click on the link we send out, this will prompt you to login to your store. 3 - Once logged in, click Install payment provider . 4 - Confirmation will appear at bottom. 5 - In Alternative Payments , select Humm from the drop-down. 6 - Enter your Merchant Number and API Key then click Save . Price-info Widgets To add the Price-info widget as below, use Shopify instructions here . Price: $1000","title":"Shopify"},{"location":"ecommerce/shopify/#integrating-on-shopify","text":"","title":"Integrating on Shopify"},{"location":"ecommerce/shopify/#locate-your-humm-credentials","text":"To integrate humm you will need your Merchant Number API Key","title":"Locate your humm Credentials"},{"location":"ecommerce/shopify/#integrating-humm","text":"1 \u2013 Email pit@%domain% with your merchant ID and mobile number for the humm Gateway Authorisation URL . 2 - Click on the link we send out, this will prompt you to login to your store. 3 - Once logged in, click Install payment provider . 4 - Confirmation will appear at bottom. 5 - In Alternative Payments , select Humm from the drop-down. 6 - Enter your Merchant Number and API Key then click Save .","title":"Integrating humm"},{"location":"ecommerce/shopify/#price-info-widgets","text":"To add the Price-info widget as below, use Shopify instructions here . Price: $1000","title":"Price-info Widgets"},{"location":"ecommerce/vend/","text":"Setup on Vend To setup and configure humm with your Vend POS device you will need the following: Your Merchant ID A POS Device Token for each Vend Device Device Tokens can be generated in your humm Merchant Portal Login to the humm Merchant Portal Select the menu in the top right corner Select POS Device Tokens Select \"Generate\" and provide the number of registers you have allocated in Vend Setup Process Add a payment type Login to your Vend store. Go to Settings -> Payment Types -> Add Payment Type Create new \"Credit Card\" Payment Type Select: Payment Type = Credit Card Custom Name = humm Configure humm Payment Type On the Settings -> Payment Types screen, choose the humm Payment Type Set the Gateway URL to: https://vend.%domain% Press the \"Save Pament Type\" Pair a Register Humm requires each Vend register to be paired with humm before it can transact against the humm POS endpoint. In order to do this, you simply need to perform a test transaction from each Vend Register with-in your store. You will be prompted for your: Merchant ID Device Token. Your Merchant ID is provided in your Welcome Pack. Device Tokens can be generated in the humm Merchant Portal Complete Congratulations! Once a register is paired, your customers can now pay with humm","title":"Vend"},{"location":"ecommerce/vend/#setup-process","text":"","title":"Setup Process"},{"location":"ecommerce/vend/#add-a-payment-type","text":"Login to your Vend store. Go to Settings -> Payment Types -> Add Payment Type","title":"Add a payment type"},{"location":"ecommerce/vend/#create-new-credit-card-payment-type","text":"Select: Payment Type = Credit Card Custom Name = humm","title":"Create new \"Credit Card\" Payment Type"},{"location":"ecommerce/vend/#configure-humm-payment-type","text":"On the Settings -> Payment Types screen, choose the humm Payment Type Set the Gateway URL to: https://vend.%domain% Press the \"Save Pament Type\"","title":"Configure humm Payment Type"},{"location":"ecommerce/vend/#pair-a-register","text":"Humm requires each Vend register to be paired with humm before it can transact against the humm POS endpoint. In order to do this, you simply need to perform a test transaction from each Vend Register with-in your store. You will be prompted for your: Merchant ID Device Token. Your Merchant ID is provided in your Welcome Pack. Device Tokens can be generated in the humm Merchant Portal","title":"Pair a Register"},{"location":"ecommerce/vend/#complete","text":"Congratulations! Once a register is paired, your customers can now pay with humm","title":"Complete"},{"location":"ecommerce/woocommerce/","text":"Integrating on WooCommerce Locate your humm Credentials To integrate humm you will need your: Merchant Number API Key Integrating humm 1 - On the left-hand side of your WordPress admin page, click Plugins > Add New then search for humm in top-right search field. 4 - Next to Humm / Oxipay Payment Gateway for WooCommerce click Install then Activate . Configuration From the Plugins page, find Humm then click Settings . Ensure humm is configured as follows. Setting Value Enabled Ticked Humm Region AU or NZ Test Mode Unticked Price Widget Ticked Merchant Type 'Little things', 'Big things' or Both. Top Banner Widget Ticked (AU Only) Top Banner on FrontPage Only Ticked (AU only) Pre-select Checkout Button Ticked Pre-select Button Order 1 Minimum Order Total 0 for no limit. Maximum Order Total 0 for no limit. Refunding 1 - Click order to refund from orders list page, then Refund at bottom. 2 - Choose the items or set the amount you want to refund then click Refund via humm .","title":"WooCommerce"},{"location":"ecommerce/woocommerce/#integrating-on-woocommerce","text":"","title":"Integrating on WooCommerce"},{"location":"ecommerce/woocommerce/#locate-your-humm-credentials","text":"To integrate humm you will need your: Merchant Number API Key","title":"Locate your humm Credentials"},{"location":"ecommerce/woocommerce/#integrating-humm","text":"1 - On the left-hand side of your WordPress admin page, click Plugins > Add New then search for humm in top-right search field. 4 - Next to Humm / Oxipay Payment Gateway for WooCommerce click Install then Activate .","title":"Integrating humm"},{"location":"ecommerce/woocommerce/#configuration","text":"From the Plugins page, find Humm then click Settings . Ensure humm is configured as follows. Setting Value Enabled Ticked Humm Region AU or NZ Test Mode Unticked Price Widget Ticked Merchant Type 'Little things', 'Big things' or Both. Top Banner Widget Ticked (AU Only) Top Banner on FrontPage Only Ticked (AU only) Pre-select Checkout Button Ticked Pre-select Button Order 1 Minimum Order Total 0 for no limit. Maximum Order Total 0 for no limit.","title":"Configuration"},{"location":"ecommerce/woocommerce/#refunding","text":"1 - Click order to refund from orders list page, then Refund at bottom. 2 - Choose the items or set the amount you want to refund then click Refund via humm .","title":"Refunding"},{"location":"pos/introduction/","text":"About POS This section provides information on how to integrate humm into your POS system. You will information about: High-level process flows API references : Information on our humm API we expose for POS transactions as well as device setup. Message and transport protocols Security : How to sign your requests to protect against malicious .attacks If you've got any questions in regards to integration that aren't covered on this site; please contact %email% .","title":"About POS"},{"location":"pos/introduction/#about-pos","text":"This section provides information on how to integrate humm into your POS system. You will information about: High-level process flows API references : Information on our humm API we expose for POS transactions as well as device setup. Message and transport protocols Security : How to sign your requests to protect against malicious .attacks If you've got any questions in regards to integration that aren't covered on this site; please contact %email% .","title":"About POS"},{"location":"widgets/banners/","text":"Banner Widgets Below are a list of banner widgets you may use to advertise humm on your website. See Generic Installation for more information on how to insert them. More Info Large <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-large.js\"></script> More Info Large Slices <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-large-slices.js\"></script> More Info Small <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-small.js\"></script> More Info Small Slices <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-small-slices.js\"></script> More Info Mini <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-mini.js\"></script>","title":"Banners"},{"location":"widgets/banners/#banner-widgets","text":"Below are a list of banner widgets you may use to advertise humm on your website. See Generic Installation for more information on how to insert them.","title":"Banner Widgets"},{"location":"widgets/banners/#more-info-large","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-large.js\"></script>","title":"More Info Large"},{"location":"widgets/banners/#more-info-large-slices","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-large-slices.js\"></script>","title":"More Info Large Slices"},{"location":"widgets/banners/#more-info-small","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-small.js\"></script>","title":"More Info Small"},{"location":"widgets/banners/#more-info-small-slices","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-small-slices.js\"></script>","title":"More Info Small Slices"},{"location":"widgets/banners/#more-info-mini","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-mini.js\"></script>","title":"More Info Mini"},{"location":"widgets/installation/","text":"Price-info Widget Setup on your Website Step 1: Choose the widget that you want to install from: Price-info Widget Banner Widgets Step 2: Place the <script> tag in the desired place you'd like it to appear on your website. Step 3: Save and you should see a working widget on your website. Working Example","title":"Generic Installation"},{"location":"widgets/installation/#price-info-widget-setup-on-your-website","text":"Step 1: Choose the widget that you want to install from: Price-info Widget Banner Widgets Step 2: Place the <script> tag in the desired place you'd like it to appear on your website. Step 3: Save and you should see a working widget on your website.","title":"Price-info Widget Setup on your Website"},{"location":"widgets/installation/#working-example","text":"","title":"Working Example"},{"location":"widgets/landing_widget/","text":"Landing Page Widget You may set up a dedicated landing page for your buyers to provide them with all the information about the humm service. Simply insert the following script tag into a blank page on your website and the following widget will display. <script id=\"humm-landing-page\" src=\"https://widgets.%domain%/content/scripts/landing-page.js\"></script>","title":"Landing widget"},{"location":"widgets/landing_widget/#landing-page-widget","text":"You may set up a dedicated landing page for your buyers to provide them with all the information about the humm service. Simply insert the following script tag into a blank page on your website and the following widget will display. <script id=\"humm-landing-page\" src=\"https://widgets.%domain%/content/scripts/landing-page.js\"></script>","title":"Landing Page Widget"},{"location":"widgets/price_info/","text":"Price-info widget How to use To use the price-info widget, you must select the corresponding type based on whether you offer 'Little things' merchant, 'Big Things' or both . Contact pit@%domain% if you're unsure what type of merchant you are. Insert the script where you want the price-info widget to display replacing PLACE_YOUR_PRODUCT_PRICE with the product price. Platform-specific Instructions Shopify Magetno 1 OpenCart 3 Widget behaviour There are three different types of price-info widgets depending on whether your humm account supports only 'Little things' , only 'Big Things' or both . See table below for possible bevahiours. <= $1000 $1000 < price <= $2000 > $2000 Default Big Things Only Little Things Only This behaviour effects all price-info widgets, including the dynamic price-info widget. 'Little things' only Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=PLACE_YOUR_PRODUCT_PRICE&LittleOnly\"></script> Note the use of &LittleOnly parameter. 'Big things' only Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=PLACE_YOUR_PRODUCT_PRICE&BigOnly\"></script> Note the use of &BigOnly parameter. Both 'Little things' and 'Big things' Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=PLACE_YOUR_PRODUCT_PRICE\"></script> Note that there is no extra parameter required. Widget features 1. Dynamically get product price Instead of passing in a fixed productPrice value, you can provide a price-selector query argument to target the HTML element containing the product price. Here, the price-info widget will get the product price from the specified element, and dynamically update when the price is changed. If product price dynamically updateson user selection, or you have multiple products on the same page, the price-info widget can dynamically get the product price from a specified HTML element in the page. With this feature, you can provide a URL encoded jQuery style CSS selector and it will bind a call back to the DOMSubTreeModified event. If the price is modified, it will update the payment info accordingly. For example, this is a block of HTML extracted from a typical WooCommerce product page: <span>Product Price:</span> <p class=\"price\"> <span id=\"priceinfo\" class=\"woocommerce-Price-amount amount\"> <span class=\"woocommerce-Price-currencySymbol\">$</span>900.00 </span> </p> Product Price : $ 900.00 In this case, we use the urlencoded %23priceinfo to refer to the id #priceinfo <script src=\"https://widgets.%domain%/content/scripts/price-info.js?price-selector=%23priceinfo\"></script> You could also use price-selector=.woocommerce-Price-amount.amount or any CSS selectors to help identify the price element. 2. Minimum and Maximum (Optional) You may set the minimum and maximum prices the widget will display for by setting the data-min and data-max when calling the widget. <script data-min=\"20\" data-max=\"300\" src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=YOUR_PRICE\"></script> Here it will not display for prices above $300 or will display in an altered form for prices below $20. *We reserve the right to change any linked image at anytime without prior notice","title":"Price-info Widget"},{"location":"widgets/price_info/#price-info-widget","text":"","title":"Price-info widget"},{"location":"widgets/price_info/#how-to-use","text":"To use the price-info widget, you must select the corresponding type based on whether you offer 'Little things' merchant, 'Big Things' or both . Contact pit@%domain% if you're unsure what type of merchant you are. Insert the script where you want the price-info widget to display replacing PLACE_YOUR_PRODUCT_PRICE with the product price.","title":"How to use"},{"location":"widgets/price_info/#platform-specific-instructions","text":"Shopify Magetno 1 OpenCart 3","title":"Platform-specific Instructions"},{"location":"widgets/price_info/#widget-behaviour","text":"There are three different types of price-info widgets depending on whether your humm account supports only 'Little things' , only 'Big Things' or both . See table below for possible bevahiours. <= $1000 $1000 < price <= $2000 > $2000 Default Big Things Only Little Things Only This behaviour effects all price-info widgets, including the dynamic price-info widget.","title":"Widget behaviour"},{"location":"widgets/price_info/#little-things-only","text":"Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=PLACE_YOUR_PRODUCT_PRICE&LittleOnly\"></script> Note the use of &LittleOnly parameter.","title":"'Little things' only"},{"location":"widgets/price_info/#big-things-only","text":"Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=PLACE_YOUR_PRODUCT_PRICE&BigOnly\"></script> Note the use of &BigOnly parameter.","title":"'Big things' only"},{"location":"widgets/price_info/#both-little-things-and-big-things","text":"Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=PLACE_YOUR_PRODUCT_PRICE\"></script> Note that there is no extra parameter required.","title":"Both 'Little things' and 'Big things'"},{"location":"widgets/price_info/#widget-features","text":"","title":"Widget features"},{"location":"widgets/price_info/#1-dynamically-get-product-price","text":"Instead of passing in a fixed productPrice value, you can provide a price-selector query argument to target the HTML element containing the product price. Here, the price-info widget will get the product price from the specified element, and dynamically update when the price is changed. If product price dynamically updateson user selection, or you have multiple products on the same page, the price-info widget can dynamically get the product price from a specified HTML element in the page. With this feature, you can provide a URL encoded jQuery style CSS selector and it will bind a call back to the DOMSubTreeModified event. If the price is modified, it will update the payment info accordingly. For example, this is a block of HTML extracted from a typical WooCommerce product page: <span>Product Price:</span> <p class=\"price\"> <span id=\"priceinfo\" class=\"woocommerce-Price-amount amount\"> <span class=\"woocommerce-Price-currencySymbol\">$</span>900.00 </span> </p> Product Price : $ 900.00 In this case, we use the urlencoded %23priceinfo to refer to the id #priceinfo <script src=\"https://widgets.%domain%/content/scripts/price-info.js?price-selector=%23priceinfo\"></script> You could also use price-selector=.woocommerce-Price-amount.amount or any CSS selectors to help identify the price element.","title":"1. Dynamically get product price"},{"location":"widgets/price_info/#2-minimum-and-maximum-optional","text":"You may set the minimum and maximum prices the widget will display for by setting the data-min and data-max when calling the widget. <script data-min=\"20\" data-max=\"300\" src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=YOUR_PRICE\"></script> Here it will not display for prices above $300 or will display in an altered form for prices below $20. *We reserve the right to change any linked image at anytime without prior notice","title":"2. Minimum and Maximum (Optional)"},{"location":"widgets/landing_pages/big_things_instore/","text":"Big Things Instore Simply insert the following image into a blank page on your site. Ensure image is inserted in its original size. > Download Link <","title":"Big Things Instore"},{"location":"widgets/landing_pages/big_things_instore/#big-things-instore","text":"Simply insert the following image into a blank page on your site. Ensure image is inserted in its original size. > Download Link <","title":"Big Things Instore"},{"location":"widgets/landing_pages/introduction/","text":"Landing Page Widget You may set up a dedicated landing page for your buyers to provide them with all the information about the humm service. Following pages explain how to setup landing pages for little only items, big only, or both.","title":"Introduction"},{"location":"widgets/landing_pages/introduction/#landing-page-widget","text":"You may set up a dedicated landing page for your buyers to provide them with all the information about the humm service. Following pages explain how to setup landing pages for little only items, big only, or both.","title":"Landing Page Widget"},{"location":"widgets/landing_pages/little_and_big_things_instore_and_online/","text":"Little and Big Things Instore and Online Simply insert the following image into a blank page on your site. Ensure image is inserted in its original size. > Download Link <","title":"Little and Big Things Instore/Online"},{"location":"widgets/landing_pages/little_and_big_things_instore_and_online/#little-and-big-things-instore-and-online","text":"Simply insert the following image into a blank page on your site. Ensure image is inserted in its original size. > Download Link <","title":"Little and Big Things Instore and Online"},{"location":"widgets/landing_pages/little_things_instore/","text":"Little Things Instore Simply insert the following image into a blank page on your site. Ensure image is inserted in its original size. > Download Link <","title":"Little Things Instore"},{"location":"widgets/landing_pages/little_things_instore/#little-things-instore","text":"Simply insert the following image into a blank page on your site. Ensure image is inserted in its original size. > Download Link <","title":"Little Things Instore"},{"location":"widgets/landing_pages/little_things_online/","text":"Little Things Online Simply insert the following image into a blank page on your site. Ensure image is inserted in its original size. > Download Link <","title":"Little Things Online"},{"location":"widgets/landing_pages/little_things_online/#little-things-online","text":"Simply insert the following image into a blank page on your site. Ensure image is inserted in its original size. > Download Link <","title":"Little Things Online"},{"location":"widgets/price-info/magento_1/","text":"Price-info Widgets on Shopify For adding Price-info Widget to your Magento 1 Website, follow these instructions Step 1: Find view.phtml from the following location in your hosting (Magento installed Folder) and open it with your desired text-editor YOUR_MAGENTO_FOLDER/app/design/frontend/rwd/YOUR_TEMPLATE_FOLDER/template/catalog/product/view.phtml Step 2: Find \"getPriceHtml\" There should be only one occurrence of the \"getPriceHtml\" string, and it may look similar to: <?php echo $this->getPriceHtml($_product); ?> Step 3: Place the following <script> tag below the \"getPriceHtml\" code. 'Little things' only Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>&LittleOnly\"></script> 'Big things' only Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>&BigOnly\"></script> Both 'Little things' and 'Big things' Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>\"></script> You may try inserting the code a few lines below the \"getPriceHtml\" code, or below some other elements. Try different places and view the visual appearance to find the most suitable place for your site. You may need to flush cache for the changes to take effect. Step 4: Save and you should see a working widget on your website.","title":"On Magento 1"},{"location":"widgets/price-info/magento_1/#price-info-widgets-on-shopify","text":"For adding Price-info Widget to your Magento 1 Website, follow these instructions Step 1: Find view.phtml from the following location in your hosting (Magento installed Folder) and open it with your desired text-editor YOUR_MAGENTO_FOLDER/app/design/frontend/rwd/YOUR_TEMPLATE_FOLDER/template/catalog/product/view.phtml Step 2: Find \"getPriceHtml\" There should be only one occurrence of the \"getPriceHtml\" string, and it may look similar to: <?php echo $this->getPriceHtml($_product); ?> Step 3: Place the following <script> tag below the \"getPriceHtml\" code.","title":"Price-info Widgets on Shopify"},{"location":"widgets/price-info/magento_1/#little-things-only","text":"Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>&LittleOnly\"></script>","title":"'Little things' only"},{"location":"widgets/price-info/magento_1/#big-things-only","text":"Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>&BigOnly\"></script>","title":"'Big things' only"},{"location":"widgets/price-info/magento_1/#both-little-things-and-big-things","text":"Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>\"></script> You may try inserting the code a few lines below the \"getPriceHtml\" code, or below some other elements. Try different places and view the visual appearance to find the most suitable place for your site. You may need to flush cache for the changes to take effect. Step 4: Save and you should see a working widget on your website.","title":"Both 'Little things' and 'Big things'"},{"location":"widgets/price-info/opencart_3/","text":"Price-info Widgets on OpenCart 3 Step 1: Open the product.twig file in the following location on your server YOUR_OPENCART_DIR/catalog/view/theme/YOUR_THEME/template/product/product.twig Step 2: Find the product price section Within the product.twig file, find the section of code where the price is displayed. Below is an excerpt from the product.twig found in the default theme. Your theme may be different. Note that you would place the widget in the section marked INSERT_WIDGET_HERE {% if price %} <ul class=\"list-unstyled\"> {% if not special %} <li> <h2>{{ price }}</h2> </li> {% else %} <li><span style=\"text-decoration: line-through;\">{{ price }}</span></li> <li> <h2>{{ special }}</h2> </li> {% endif %} INSERT_WIDGET_HERE {% if tax %} <li>{{ text_tax }} {{ tax }}</li> {% endif %} {% if points %} <li>{{ text_points }} {{ points }}</li> {% endif %} {% if discounts %} <li> <hr> </li> {% for discount in discounts %} <li>{{ discount.quantity }}{{ text_discount }}{{ discount.price }}</li> {% endfor %} {% endif %} </ul> {% endif %} Step 3: Place the following <script> tag into the product.twig file. 'Little things' only Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}&LittleOnly\"></script> 'Big things' only Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}&BigOnly\"></script> Both 'Little things' and 'Big things' Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}\"></script> Try inserting the widget in different places in the code until you find the most suitable place for your site. Step 4: Save and you should see a working widget on your website.","title":"On OpenCart 3"},{"location":"widgets/price-info/opencart_3/#price-info-widgets-on-opencart-3","text":"Step 1: Open the product.twig file in the following location on your server YOUR_OPENCART_DIR/catalog/view/theme/YOUR_THEME/template/product/product.twig Step 2: Find the product price section Within the product.twig file, find the section of code where the price is displayed. Below is an excerpt from the product.twig found in the default theme. Your theme may be different. Note that you would place the widget in the section marked INSERT_WIDGET_HERE {% if price %} <ul class=\"list-unstyled\"> {% if not special %} <li> <h2>{{ price }}</h2> </li> {% else %} <li><span style=\"text-decoration: line-through;\">{{ price }}</span></li> <li> <h2>{{ special }}</h2> </li> {% endif %} INSERT_WIDGET_HERE {% if tax %} <li>{{ text_tax }} {{ tax }}</li> {% endif %} {% if points %} <li>{{ text_points }} {{ points }}</li> {% endif %} {% if discounts %} <li> <hr> </li> {% for discount in discounts %} <li>{{ discount.quantity }}{{ text_discount }}{{ discount.price }}</li> {% endfor %} {% endif %} </ul> {% endif %} Step 3: Place the following <script> tag into the product.twig file.","title":"Price-info Widgets on OpenCart 3"},{"location":"widgets/price-info/opencart_3/#little-things-only","text":"Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}&LittleOnly\"></script>","title":"'Little things' only"},{"location":"widgets/price-info/opencart_3/#big-things-only","text":"Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}&BigOnly\"></script>","title":"'Big things' only"},{"location":"widgets/price-info/opencart_3/#both-little-things-and-big-things","text":"Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}\"></script> Try inserting the widget in different places in the code until you find the most suitable place for your site. Step 4: Save and you should see a working widget on your website.","title":"Both 'Little things' and 'Big things'"},{"location":"widgets/price-info/shopify/","text":"Price-info Widgets on Shopify 1 - From the Shopify Dashboard, navigate to Online Store > Themes > Actions > Edit Code . 2 - From left panel, navigate to Sections then select product-template.liquid . If the \"product-template.liquid\" file does not exist , navigate to Templates and select product.liquid instead. 3 - Place the <script> tag in the desired place you'd like it to appear on your website, typically this is before. This should be added before Add to Cart button tag. 'Little things' only Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}&LittleOnly\"></script> 'Big things' only Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}&BigOnly\"></script> Both 'Little things' and 'Big things' Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}\"></script> 4 - Save and you should see a working widget on your website.","title":"On Shopify"},{"location":"widgets/price-info/shopify/#price-info-widgets-on-shopify","text":"1 - From the Shopify Dashboard, navigate to Online Store > Themes > Actions > Edit Code . 2 - From left panel, navigate to Sections then select product-template.liquid . If the \"product-template.liquid\" file does not exist , navigate to Templates and select product.liquid instead. 3 - Place the <script> tag in the desired place you'd like it to appear on your website, typically this is before. This should be added before Add to Cart button tag.","title":"Price-info Widgets on Shopify"},{"location":"widgets/price-info/shopify/#little-things-only","text":"Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}&LittleOnly\"></script>","title":"'Little things' only"},{"location":"widgets/price-info/shopify/#big-things-only","text":"Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}&BigOnly\"></script>","title":"'Big things' only"},{"location":"widgets/price-info/shopify/#both-little-things-and-big-things","text":"Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}\"></script> 4 - Save and you should see a working widget on your website.","title":"Both 'Little things' and 'Big things'"}]}